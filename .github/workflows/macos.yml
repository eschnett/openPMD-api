name: üçè macOS

on: [push, pull_request]

concurrency:
  group: ${{ github.ref }}-${{ github.head_ref }}-macos
  cancel-in-progress: true

jobs:
# TODO: (old Travis-CI coverage)
#  appleclang9_py37_nompi_h5_ad1
#  appleclang10_py37_h5_ad2_libcpp
#  appleclang11_nopy_nompi_h5_ad2

  appleclang12_py_mpi_h5_ad2:
    runs-on: macos-latest
    if: github.event.pull_request.draft == false
    steps:
    - uses: actions/checkout@v2
    - name: Install
      run: |
        rm -rf /usr/local/bin/2to3
        set +e
        brew update
        brew install adios2 || true
        brew install hdf5-mpi || true
        brew install julia || true
        brew install python || true
        set -e
        # Install libcxxwrap-julia
        # wget https://github.com/JuliaInterop/libcxxwrap-julia/archive/refs/tags/v0.8.3.tar.gz
        # tar xzf v0.8.3.tar.gz
        # rm -rf v0.8.3.tar.gz
        # cd libcxxwrap-julia-0.8.3
        wget https://github.com/JuliaInterop/libcxxwrap-julia/tarball/37743e11cda7363a17840fe2353ff78a7e964a2c
        tar xzf 37743e11cda7363a17840fe2353ff78a7e964a2c
        rm -rf 37743e11cda7363a17840fe2353ff78a7e964a2c
        cd JuliaInterop-libcxxwrap-julia-37743e1
        cmake -S . -B build
        cmake --build build --parallel 2
        cmake --install build
        cd ..
        # rm -rf libcxxwrap-julia-0.8.3
        rm -rf JuliaInterop-libcxxwrap-julia-37743e1
    - name: Build
      env: {CXXFLAGS: -Werror -Wno-deprecated-declarations, MACOSX_DEPLOYMENT_TARGET: 10.12}
      # C++11 & 14 support in macOS 10.9+
      # C++17 support in macOS 10.13+/10.14+
      #   https://cibuildwheel.readthedocs.io/en/stable/cpp_standards/#macos-and-deployment-target-versions
      run: |
        share/openPMD/download_samples.sh build
        chmod u-w build/samples/git-sample/*.h5
        cmake -S . -B build \
          -DopenPMD_USE_ADIOS2=ON \
          -DopenPMD_USE_HDF5=ON   \
          -DopenPMD_USE_Julia=ON  \
          -DopenPMD_USE_MPI=ON    \
          -DopenPMD_USE_PYTHON=ON \
          -DopenPMD_USE_INVASIVE_TESTS=ON
        cmake --build build --parallel 2
        ctest --test-dir build --output-on-failure

# TODO: apple_conda_ompi_all (similar to conda_ompi_all on Linux)
#   both OpenMPI and MPICH cause startup (MPI_Init) issues on GitHub Actions
